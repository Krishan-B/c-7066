#!/bin/bash
set -euo pipefail

# Orchestrator for VS Code environment diagnostics using modular components
# Runs comprehensive health checks across all areas: extensions, cache, keychain, logs

# --- Configuration ---
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DIAGNOSTICS_DIR="$SCRIPT_DIR/diagnostics"

# Source the core diagnostics library
if [ ! -f "$DIAGNOSTICS_DIR/core.sh" ]; then
    echo "‚ùå Error: Core diagnostics library not found at $DIAGNOSTICS_DIR/core.sh"
    echo "üí° Please ensure the modular diagnostics are properly installed."
    exit 1
fi

source "$DIAGNOSTICS_DIR/core.sh"

# Diagnostic modules to run in order
DIAGNOSTIC_MODULES=(
    "extensions.sh"
    "keychain.sh" 
    "cache.sh"
    "logs.sh"
)

# --- Functions ---

print_header() {
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                    üîç VS CODE ENVIRONMENT DIAGNOSTICS                        ‚ïë"
    echo "‚ïë                      Comprehensive Health & Issue Detection                   ‚ïë"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    echo ""
}

run_diagnostic_module() {
    local module_name="$1"
    local module_path="$DIAGNOSTICS_DIR/$module_name"
    
    if [ ! -f "$module_path" ]; then
        log_error "Diagnostic module '$module_name' not found at $module_path"
        return 1
    fi
    
    if [ ! -x "$module_path" ]; then
        log_info "Making '$module_name' executable..."
        chmod +x "$module_path"
    fi
    
    log_info "Running diagnostic module: $module_name"
    echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
    
    if "$module_path"; then
        log_success "$module_name completed successfully"
        return 0
    else
        log_error "$module_name failed with exit code $?"
        return 1
    fi
}

print_module_header() {
    local module="$1"
    case "$module" in
        "extensions.sh")
            echo ""
            echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
            echo "‚îÇ  üîå EXTENSION HEALTH & CONFLICT DETECTION                                    ‚îÇ"
            echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
            ;;
        "keychain.sh")
            echo ""
            echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
            echo "‚îÇ  üîë KEYCHAIN & AUTHENTICATION STORAGE HEALTH                                ‚îÇ"
            echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
            ;;
        "cache.sh")
            echo ""
            echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
            echo "‚îÇ  üóÇÔ∏è  CACHE & STORAGE BLOAT DETECTION                                        ‚îÇ"
            echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
            ;;
        "logs.sh")
            echo ""
            echo "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
            echo "‚îÇ  üìã LOG ANALYSIS & ERROR SIGNAL DETECTION                                   ‚îÇ"
            echo "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
            ;;
    esac
}

print_summary() {
    local passed="$1"
    local failed="$2"
    local total="$3"
    
    echo ""
    echo "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    echo "‚ïë                            üìä DIAGNOSTIC SUMMARY                             ‚ïë"
    echo "‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£"
    printf "‚ïë  Total Modules: %-3d  ‚îÇ  Passed: %-3d  ‚îÇ  Failed: %-3d                     ‚ïë\n" "$total" "$passed" "$failed"
    echo "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù"
    
    if [ "$failed" -eq 0 ]; then
        echo ""
        log_success "üéâ ALL DIAGNOSTIC MODULES PASSED!"
        echo "‚ú® Your VS Code environment appears to be in excellent health."
        echo "üöÄ No critical issues detected that would cause InstantiationService or keychain errors."
    else
        echo ""
        log_warning "‚ö†Ô∏è  Some diagnostic modules detected issues."
        echo "üí° Review the output above for specific recommendations."
        echo "üîß Run individual diagnostic modules for more detailed analysis if needed."
    fi
}

provide_general_recommendations() {
    echo ""
    echo "üìù GENERAL RECOMMENDATIONS:"
    echo ""
    echo "‚Ä¢ Run diagnostics regularly to maintain environment health"
    echo "‚Ä¢ Keep VS Code and extensions updated to latest stable versions"
    echo "‚Ä¢ Clear cache periodically if you notice performance issues"
    echo "‚Ä¢ Monitor log files for recurring error patterns"
    echo "‚Ä¢ Use individual diagnostic modules for targeted troubleshooting:"
    echo "  - scripts/diagnostics/extensions.sh  (extension conflicts)"
    echo "  - scripts/diagnostics/keychain.sh    (auth/keychain issues)"
    echo "  - scripts/diagnostics/cache.sh       (cache bloat)"
    echo "  - scripts/diagnostics/logs.sh        (log analysis)"
    echo ""
}

# --- Main Execution ---

main() {
    # Initialize logging
    init_logging
    
    print_header
    
    local total_modules=${#DIAGNOSTIC_MODULES[@]}
    local passed_modules=0
    local failed_modules=0
    
    # Run each diagnostic module
    for module in "${DIAGNOSTIC_MODULES[@]}"; do
        print_module_header "$module"
        
        if run_diagnostic_module "$module"; then
            ((passed_modules++))
        else
            ((failed_modules++))
        fi
        
        echo ""
    done
    
    print_summary "$passed_modules" "$failed_modules" "$total_modules"
    provide_general_recommendations
    
    echo "üéØ VS Code environment diagnostic completed!"
    
    # Exit with failure if any modules failed
    if [ "$failed_modules" -gt 0 ]; then
        exit 1
    else
        exit 0
    fi
}

# Run main function
main "$@"
          fi
        fi
      fi
    done
  else
    echo "‚ö†Ô∏è  VS Code storage directory not found: $vscode_storage"
    echo "   This may indicate a fresh session or storage initialization issues"
    issues_found=true
  fi
  
  # Check for browser storage issues indicators
  if [ -f "$HOME/.vscode-remote/logs/main.log" ]; then
    local keychain_errors=$(grep -c "LocalStorageKeychain\|Failed to get cipher\|keychain.*failed" "$HOME/.vscode-remote/logs/main.log" 2>/dev/null || echo "0")
    if [ "$keychain_errors" -gt 0 ]; then
      echo "‚ùå Found $keychain_errors keychain-related errors in logs"
      echo "   Recent keychain failures detected - authentication may be unstable"
      issues_found=true
    fi
  fi
  
  if [ "$issues_found" = false ]; then
    echo "‚úÖ Keychain and authentication storage appear healthy"
  fi
  
  return 0
}

check_extension_conflicts() {
  echo "üîç Checking for potentially problematic extensions..."
  local issues_found=false
  
  if ! command_exists code; then
    echo "‚ö†Ô∏è  'code' command not available - skipping extension check"
    return 0
  fi
  
  local installed_extensions=$(code --list-extensions 2>/dev/null || echo "")
  
  for pattern in "${PROBLEMATIC_EXTENSIONS[@]}"; do
    if echo "$installed_extensions" | grep -qi "${pattern%\*}"; then
      echo "‚ùå Found potentially problematic extension matching: $pattern"
      issues_found=true
    fi
  done
  
  # Check for extensions that are known to cause disposal issues
  if echo "$installed_extensions" | grep -qi "liveshare"; then
    echo "‚ö†Ô∏è  Live Share extensions detected - these can cause disposal issues in web environments"
    issues_found=true
  fi
  
  # Check for disposal-prone extensions
  echo "üîç Checking for extensions prone to InstantiationService disposal issues..."
  for pattern in "${DISPOSAL_PRONE_EXTENSIONS[@]}"; do
    local clean_pattern="${pattern%\*}"
    clean_pattern="${clean_pattern#\*}"
    if echo "$installed_extensions" | grep -qi "$clean_pattern"; then
      echo "‚ö†Ô∏è  Found disposal-prone extension pattern: $pattern"
      echo "   These extensions may cause 'InstantiationService has been disposed' errors"
      issues_found=true
    fi
  done
  
  # Check for keychain-dependent extensions
  echo "üîç Checking for extensions that depend on keychain/authentication..."
  for ext in "${KEYCHAIN_DEPENDENT_EXTENSIONS[@]}"; do
    if echo "$installed_extensions" | grep -qi "${ext}"; then
      echo "üîë Found keychain-dependent extension: $ext"
      echo "   If experiencing auth issues, try disabling this extension temporarily"
    fi
  done
  
  if [ "$issues_found" = false ]; then
    echo "‚úÖ No obviously problematic extensions detected"
  fi
  
  return 0
}

check_workspace_settings() {
  echo "üîç Checking workspace settings for potential conflicts..."
  local settings_file=".vscode/settings.json"
  local issues_found=false
  
  if [ ! -f "$settings_file" ]; then
    echo "‚úÖ No workspace settings file found"
    return 0
  fi
  
  for setting in "${PROBLEMATIC_SETTINGS[@]}"; do
    if grep -q "\"$setting\"" "$settings_file" 2>/dev/null; then
      echo "‚ö†Ô∏è  Found potentially problematic setting: $setting"
      issues_found=true
    fi
  done
  
  # Check for disposal race condition settings
  echo "üîç Checking for settings that may cause disposal race conditions..."
  for setting in "${DISPOSAL_RISKY_SETTINGS[@]}"; do
    if grep -q "\"$setting\"" "$settings_file" 2>/dev/null; then
      echo "‚ö†Ô∏è  Found disposal-risky setting: $setting"
      echo "   This setting may contribute to InstantiationService disposal errors"
      issues_found=true
    fi
  done
  
  # Check for authentication-related settings
  if grep -q "github.copilot\|authentication" "$settings_file" 2>/dev/null; then
    echo "üîë Found authentication-related settings"
    echo "   If experiencing keychain issues, verify these settings are correct"
  fi
  
  # Check for deprecated settings
  if grep -q "typescript.preferences.includePackageJsonAutoImports" "$settings_file" 2>/dev/null; then
    echo "‚ö†Ô∏è  Found deprecated TypeScript setting that may cause issues"
    issues_found=true
  fi
  
  # Check for problematic link provider settings
  if grep -q "terminal.integrated.enableFileLinks" "$settings_file" 2>/dev/null; then
    echo "‚ö†Ô∏è  Found terminal file links setting - may cause provideLinks disposal issues"
    issues_found=true
  fi
  
  if [ "$issues_found" = false ]; then
    echo "‚úÖ Workspace settings appear clean"
  fi
  
  return 0
}

check_disposal_conditions() {
  echo "üîç Checking for conditions that may cause InstantiationService disposal..."
  local issues_found=false
  
  # Check for rapid reload indicators
  if [ -f ".vscode/.ropeproject" ] || [ -d ".vscode/workspaceStorage" ]; then
    echo "‚ö†Ô∏è  Found workspace storage that might contain stale disposal state"
    issues_found=true
  fi
  
  # Check for problematic activation events in extensions.json
  if [ -f ".vscode/extensions.json" ]; then
    if grep -q "onStartupFinished\|onCommand\|onUri" ".vscode/extensions.json" 2>/dev/null; then
      echo "‚ö†Ô∏è  Found potentially problematic activation events in extensions.json"
      echo "   These may trigger before VS Code is fully ready, causing disposal issues"
      issues_found=true
    fi
  fi
  
  # Check for terminal-related files that might cause link provider issues
  if [ -d ".vscode/terminals" ] || find . -name "*terminal*" -type f 2>/dev/null | head -1 | grep -q .; then
    echo "‚ö†Ô∏è  Found terminal-related files that may conflict with provideLinks"
    issues_found=true
  fi
  
  # Check for markdown files that might trigger preview disposal
  local md_count=$(find . -name "*.md" -not -path "./node_modules/*" 2>/dev/null | wc -l)
  if [ "$md_count" -gt 50 ]; then
    echo "‚ö†Ô∏è  Large number of markdown files ($md_count) detected"
    echo "   This may stress the markdown preview system and cause disposal issues"
    issues_found=true
  fi
  
  if [ "$issues_found" = false ]; then
    echo "‚úÖ No obvious disposal risk conditions detected"
  fi
  
  return 0
}

check_cache_health() {
  echo "üîç Checking extension cache files for performance issues..."
  local issues_found=false
  
  # Function to convert file size to MB
  get_file_size_mb() {
    local file="$1"
    if [ -f "$file" ]; then
      local size_bytes=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
      echo $((size_bytes / 1024 / 1024))
    else
      echo "0"
    fi
  }
  
  # Check specific problematic cache files
  for cache_path in "${PROBLEMATIC_CACHE_FILES[@]}"; do
    # Expand tilde to home directory
    local expanded_path="${cache_path/#\~/$HOME}"
    
    if [ -f "$expanded_path" ]; then
      local size_mb=$(get_file_size_mb "$expanded_path")
      
      if [ "$size_mb" -gt "$VERY_LARGE_FILE_THRESHOLD_MB" ]; then
        echo "‚ùå VERY LARGE cache file: $cache_path (${size_mb}MB > ${VERY_LARGE_FILE_THRESHOLD_MB}MB)"
        echo "   This file is likely causing performance issues and should be cleaned up"
        issues_found=true
      elif [ "$size_mb" -gt "$LARGE_FILE_THRESHOLD_MB" ]; then
        echo "‚ö†Ô∏è  Large cache file: $cache_path (${size_mb}MB > ${LARGE_FILE_THRESHOLD_MB}MB)"
        echo "   Consider cleaning this file if you experience slowdowns"
        issues_found=true
      fi
    elif [ -d "$expanded_path" ]; then
      # Check directory size
      local dir_size_mb=$(du -sm "$expanded_path" 2>/dev/null | cut -f1 || echo "0")
      
      if [ "$dir_size_mb" -gt "$VERY_LARGE_FILE_THRESHOLD_MB" ]; then
        echo "‚ùå VERY LARGE cache directory: $cache_path (${dir_size_mb}MB > ${VERY_LARGE_FILE_THRESHOLD_MB}MB)"
        echo "   This directory is likely causing performance issues"
        issues_found=true
      elif [ "$dir_size_mb" -gt "$LARGE_FILE_THRESHOLD_MB" ]; then
        echo "‚ö†Ô∏è  Large cache directory: $cache_path (${dir_size_mb}MB > ${LARGE_FILE_THRESHOLD_MB}MB)"
        echo "   Consider cleaning old files in this directory"
        issues_found=true
      fi
    fi
  done
  
  # Check for GitHub Copilot specific issues
  local copilot_embeddings="$HOME/.vscode-remote/data/User/globalStorage/github.copilot-chat/commandEmbeddings.json"
  if [ -f "$copilot_embeddings" ]; then
    local size_mb=$(get_file_size_mb "$copilot_embeddings")
    if [ "$size_mb" -gt "$LARGE_FILE_THRESHOLD_MB" ]; then
      echo "ü§ñ GitHub Copilot embeddings cache is large (${size_mb}MB)"
      echo "   You can safely delete this file - Copilot will regenerate it"
      echo "   Command: rm '$copilot_embeddings'"
      issues_found=true
    fi
  fi
  
  # Check for excessive log files
  local log_dir="$HOME/.vscode-remote/logs"
  if [ -d "$log_dir" ]; then
    local old_logs=$(find "$log_dir" -name "*.log" -mtime +7 2>/dev/null | wc -l)
    if [ "$old_logs" -gt 10 ]; then
      echo "‚ö†Ô∏è  Found $old_logs old log files (>7 days) in VS Code logs"
      echo "   Consider cleaning old logs: find '$log_dir' -name '*.log' -mtime +7 -delete"
      issues_found=true
    fi
  fi
  
  if [ "$issues_found" = false ]; then
    echo "‚úÖ Extension cache files appear healthy"
  fi
  
  return 0
}

check_editor_state() {
  echo "üîç Checking editor state and common disposal triggers..."
  
  # Check for excessive open tabs (can cause memory/disposal issues)
  if [ -f ".vscode/workspaceStorage" ] || [ -d ".vscode/.ropeproject" ]; then
    echo "‚ö†Ô∏è  Found workspace storage that might contain stale state"
  fi
  
  # Check for large files that might cause editor issues
  local large_files=$(find . -name "*.json" -size +1M 2>/dev/null || echo "")
  if [ -n "$large_files" ]; then
    echo "‚ö†Ô∏è  Found large JSON files that might stress the editor:"
    echo "$large_files" | head -3
  fi
  
  echo "‚úÖ Editor state check completed"
}

check_log_health() {
  echo "üîç Analyzing VS Code logs for signal vs noise..."
  local issues_found=false
  local log_dir="$HOME/.vscode-remote/logs"
  
  if [ ! -d "$log_dir" ]; then
    echo "‚úÖ No log directory found (clean session)"
    return 0
  fi
  
  # Find the most recent log file
  local recent_log=$(find "$log_dir" -name "*.log" -type f -exec ls -t {} + | head -1)
  
  if [ -z "$recent_log" ]; then
    echo "‚úÖ No recent log files found"
    return 0
  fi
  
  echo "üìã Analyzing recent log: $(basename "$recent_log")"
  
  # Count actual errors vs informational messages
  local error_count=0
  local info_count=0
  
  for pattern in "${ERROR_LOG_PATTERNS[@]}"; do
    local matches=$(grep -c "$pattern" "$recent_log" 2>/dev/null || echo "0")
    if [ "$matches" -gt 0 ]; then
      echo "‚ùå Found $matches instances of: $pattern"
      error_count=$((error_count + matches))
      issues_found=true
    fi
  done
  
  for pattern in "${INFORMATIONAL_LOG_PATTERNS[@]}"; do
    local matches=$(grep -c "$pattern" "$recent_log" 2>/dev/null || echo "0")
    if [ "$matches" -gt 0 ]; then
      echo "‚ÑπÔ∏è  Found $matches informational messages: $pattern"
      info_count=$((info_count + matches))
    fi
  done
  
  # Provide context about the signal-to-noise ratio
  if [ "$error_count" -eq 0 ] && [ "$info_count" -gt 0 ]; then
    echo "‚úÖ Good signal-to-noise ratio: $info_count informational, $error_count errors"
    echo "   The similarity matching and other messages are normal operation"
  elif [ "$error_count" -gt 0 ]; then
    echo "‚ö†Ô∏è  Found $error_count actual errors among $info_count informational messages"
    echo "   Focus on the error patterns above for troubleshooting"
  fi
  
  # Check for excessive logging that might impact performance
  local log_size_mb=$(du -m "$recent_log" 2>/dev/null | cut -f1)
  if [ "$log_size_mb" -gt 50 ]; then
    echo "‚ö†Ô∏è  Large log file detected (${log_size_mb}MB)"
    echo "   Consider clearing logs if VS Code feels slow"
    issues_found=true
  fi
  
  if [ "$issues_found" = false ]; then
    echo "‚úÖ Log analysis shows healthy VS Code operation"
  fi
  
  return 0
}

provide_recommendations() {
  echo ""
  echo "üöë Recommendations for a healthy VS Code environment:"
  echo ""
  echo "1. üîÑ Reload Window: Ctrl+Shift+P ‚Üí 'Developer: Reload Window'"
  echo "2. üßπ Clear workspace state: Close all tabs and reload"
  echo "3. üîå Disable problematic extensions temporarily"
  echo "4. üõ†Ô∏è  Run extension cleanup: npm run extensions:cleanup"
  echo "5. üìã Validate JSON configs: ./scripts/lint-json-configs.sh"
  echo "6. üè• Check extension health: ./scripts/assert-vscode-health.sh"
  echo ""
  echo "üîß For InstantiationService disposal errors specifically:"
  echo "7. üö´ Disable terminal/link/preview extensions temporarily"
  echo "8. üîÑ Restart VS Code completely (not just reload)"
  echo "9. üß™ Test in safe mode: Ctrl+Shift+P ‚Üí 'Developer: Reload With Extensions Disabled'"
  echo "10. üìù Remove .vscode/workspaceStorage if present"
  echo ""
  echo "üîë For keychain and authentication issues:"
  echo "11. üóëÔ∏è  Clear browser site data for github.dev (logs you out)"
  echo "12. üîÑ Restart extension host: Ctrl+Shift+P ‚Üí 'Developer: Restart Extension Host'"
  echo "13. üîå Disable auth extensions temporarily (GitHub Copilot, etc.)"
  echo "14. üßπ Clear secrets storage: rm -rf ~/.vscode-remote/data/User/secrets/*"
  echo ""
  echo "üóÇÔ∏è  For cache and performance issues:"
  echo "15. ü§ñ Clean Copilot cache: rm ~/.vscode-remote/data/User/globalStorage/github.copilot-chat/commandEmbeddings.json"
  echo "16. üßπ Clear old logs: find ~/.vscode-remote/logs -name '*.log' -mtime +7 -delete"
  echo "17. üóÑÔ∏è  Clear workspace storage: rm -rf ~/.vscode-remote/data/User/workspaceStorage/*"
  echo ""
  echo "üìä For log analysis and noise reduction:"
  echo "18. üîç Filter DevTools console: Use 'Error' level to hide informational messages"
  echo "19. üìã Focus on error patterns: Ignore similarity matching and telemetry messages"
  echo "20. üóÇÔ∏è  Archive large logs: Move logs >50MB to reduce memory usage"
  echo ""
  echo "üí° If issues persist, try opening VS Code in safe mode:"
  echo "   Ctrl+Shift+P ‚Üí 'Developer: Reload With Extensions Disabled'"
}

# --- Main Execution ---

main() {
  echo "üöÄ Starting VS Code environment diagnostics..."
  echo ""
  
  check_keychain_health
  echo ""
  
  check_extension_conflicts
  echo ""
  
  check_workspace_settings
  echo ""
  
  check_disposal_conditions
  echo ""
  
  check_cache_health
  echo ""
  
  check_log_health
  echo ""
  
  check_editor_state
  echo ""
  
  check_log_health
  echo ""
  
  provide_recommendations
  
  echo "üéØ VS Code environment diagnostic completed!"
  exit 0
}

main
