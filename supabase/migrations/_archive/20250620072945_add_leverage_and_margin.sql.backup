-- Create asset_leverage_config table for asset-specific leverage ratios
CREATE TABLE IF NOT EXISTS public.asset_leverage_config (
  id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
  asset_class TEXT NOT NULL,
  symbol TEXT,
  max_leverage INTEGER NOT NULL,
  min_margin_requirement NUMERIC NOT NULL,
  maintenance_margin NUMERIC NOT NULL,
  margin_call_level NUMERIC NOT NULL DEFAULT 1.0,
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  UNIQUE(asset_class, symbol)
);

-- Insert default leverage configurations per asset class
INSERT INTO public.asset_leverage_config (asset_class, symbol, max_leverage, min_margin_requirement, maintenance_margin, margin_call_level) VALUES
('forex', NULL, 500, 0.002, 0.005, 1.0),
('indices', NULL, 200, 0.005, 0.01, 1.0),
('stocks', NULL, 20, 0.05, 0.1, 1.0),
('commodities', NULL, 100, 0.01, 0.02, 1.0),
('crypto', NULL, 10, 0.1, 0.2, 1.0)
ON CONFLICT (asset_class, symbol) DO NOTHING;

-- Create margin_calculations table for tracking margin requirements (only if positions table exists)
DO $$
BEGIN
    IF EXISTS (SELECT FROM information_schema.tables WHERE table_schema = 'public' AND table_name = 'positions') THEN
        CREATE TABLE IF NOT EXISTS public.margin_calculations (
          id UUID NOT NULL DEFAULT gen_random_uuid() PRIMARY KEY,
          position_id UUID REFERENCES public.positions(id) ON DELETE CASCADE,
          user_id UUID NOT NULL,
          initial_margin NUMERIC NOT NULL,
          maintenance_margin NUMERIC NOT NULL,
          used_margin NUMERIC NOT NULL,
  free_margin NUMERIC NOT NULL,
  margin_level NUMERIC NOT NULL,
  leverage_used NUMERIC NOT NULL,
  calculated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW()
);

-- Enable RLS for new tables
ALTER TABLE public.asset_leverage_config ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.margin_calculations ENABLE ROW LEVEL SECURITY;

-- Create RLS policies for asset_leverage_config (public read access)
DROP POLICY IF EXISTS "Anyone can view leverage config" ON public.asset_leverage_config;
CREATE POLICY "Anyone can view leverage config" 
  ON public.asset_leverage_config 
  FOR SELECT 
  USING (true);

-- Create RLS policies for margin_calculations
DROP POLICY IF EXISTS "Users can view their own margin calculations" ON public.margin_calculations;
CREATE POLICY "Users can view their own margin calculations" 
  ON public.margin_calculations 
  FOR SELECT 
  USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can insert their own margin calculations" ON public.margin_calculations;
CREATE POLICY "Users can insert their own margin calculations" 
  ON public.margin_calculations 
  FOR INSERT 
  WITH CHECK (auth.uid() = user_id);

-- Add leverage and margin columns to positions table
ALTER TABLE public.positions 
ADD COLUMN IF NOT EXISTS leverage_ratio NUMERIC DEFAULT 1.0,
ADD COLUMN IF NOT EXISTS initial_margin NUMERIC DEFAULT 0,
ADD COLUMN IF NOT EXISTS maintenance_margin NUMERIC DEFAULT 0,
ADD COLUMN IF NOT EXISTS margin_level NUMERIC DEFAULT 0;

-- Create function to calculate leverage and margin requirements
CREATE OR REPLACE FUNCTION public.calculate_position_margin(
  p_asset_class TEXT,
  p_symbol TEXT,
  p_position_value NUMERIC,
  p_leverage NUMERIC DEFAULT NULL
) RETURNS TABLE(
  max_leverage INTEGER,
  initial_margin NUMERIC,
  maintenance_margin NUMERIC,
  margin_level NUMERIC,
  leverage_used NUMERIC
)
SET search_path = public
AS $$
DECLARE
  config RECORD;
  calculated_leverage NUMERIC;
  initial_margin_val NUMERIC;
  maintenance_margin_val NUMERIC;
BEGIN
  -- Get leverage configuration for the asset
  SELECT * INTO config 
  FROM public.asset_leverage_config 
  WHERE asset_class = p_asset_class 
    AND (symbol = p_symbol OR symbol IS NULL)
  ORDER BY symbol NULLS LAST
  LIMIT 1;
  
  IF NOT FOUND THEN
    -- Default fallback values
    config.max_leverage := 10;
    config.min_margin_requirement := 0.1;
    config.maintenance_margin := 0.2;
    config.margin_call_level := 1.0;
  END IF;
  
  -- Use provided leverage or maximum allowed
  calculated_leverage := COALESCE(p_leverage, config.max_leverage);
  calculated_leverage := LEAST(calculated_leverage, config.max_leverage);
  
  -- Calculate margin requirements
  initial_margin_val := p_position_value / calculated_leverage;
  maintenance_margin_val := p_position_value * config.maintenance_margin;
  
  RETURN QUERY SELECT 
    config.max_leverage,
    initial_margin_val,
    maintenance_margin_val,
    config.margin_call_level,
    calculated_leverage;
END;
$$ LANGUAGE plpgsql;

-- Create function to update position with leverage and margin
CREATE OR REPLACE FUNCTION public.update_position_leverage(
  p_position_id UUID,
  p_leverage NUMERIC DEFAULT NULL
) RETURNS BOOLEAN
SET search_path = public
AS $$
DECLARE
  pos RECORD;
  margin_data RECORD;
BEGIN
  -- Get position details
  SELECT * INTO pos 
  FROM public.positions 
  WHERE id = p_position_id;
  
  IF NOT FOUND THEN
    RETURN FALSE;
  END IF;
  
  -- Calculate margin requirements
  SELECT * INTO margin_data 
  FROM public.calculate_position_margin(
    pos.asset_class, 
    pos.symbol, 
    pos.position_value, 
    p_leverage
  );
  
  -- Update position with leverage and margin data
  UPDATE public.positions 
  SET 
    leverage_ratio = margin_data.leverage_used,
    initial_margin = margin_data.initial_margin,
    maintenance_margin = margin_data.maintenance_margin,
    margin_level = margin_data.margin_level,
    margin_used = margin_data.initial_margin,
    last_updated = NOW()
  WHERE id = p_position_id;
  
  -- Insert margin calculation record
  INSERT INTO public.margin_calculations (
    position_id,
    user_id,
    initial_margin,
    maintenance_margin,
    used_margin,
    free_margin,
    margin_level,
    leverage_used
  )
  SELECT 
    p_position_id,
    pos.user_id,
    margin_data.initial_margin,
    margin_data.maintenance_margin,
    margin_data.initial_margin,
    0, -- Will be calculated based on account balance
    margin_data.margin_level,
    margin_data.leverage_used;
  
  RETURN TRUE;
END;
$$ LANGUAGE plpgsql;

-- Create indexes for better performance
CREATE INDEX IF NOT EXISTS idx_asset_leverage_config_asset_class ON public.asset_leverage_config(asset_class);
CREATE INDEX IF NOT EXISTS idx_asset_leverage_config_symbol ON public.asset_leverage_config(symbol);
CREATE INDEX IF NOT EXISTS idx_margin_calculations_position_id ON public.margin_calculations(position_id);
CREATE INDEX IF NOT EXISTS idx_margin_calculations_user_id ON public.margin_calculations(user_id);

-- Create trigger to automatically calculate leverage when position is created/updated
CREATE OR REPLACE FUNCTION public.auto_calculate_position_leverage()
RETURNS TRIGGER
SET search_path = public
AS $$
BEGIN
  -- Calculate leverage and margin for the position
  PERFORM public.update_position_leverage(NEW.id, NEW.leverage_ratio);
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create trigger for positions table
DROP TRIGGER IF EXISTS trigger_auto_calculate_leverage ON public.positions;
CREATE TRIGGER trigger_auto_calculate_leverage
  AFTER INSERT OR UPDATE ON public.positions
  FOR EACH ROW
  EXECUTE FUNCTION public.auto_calculate_position_leverage();
